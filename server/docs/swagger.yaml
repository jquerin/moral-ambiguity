definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.Product:
    properties:
      id:
        type: integer
      name:
        example: baseball
        type: string
      price:
        example: 4
        type: integer
      stock:
        example: 15
        type: integer
    type: object
  models.ResponseHTTP:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      names:
        type: string
      password:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Login user with provided credentials. Returns JWT Token
      parameters:
      - description: Login User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.ResponseHTTP'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseHTTP'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseHTTP'
      summary: Login user
      tags:
      - auth
  /api/products:
    get:
      consumes:
      - application/json
      description: Get all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.ResponseHTTP'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Product'
                  type: array
              type: object
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/models.ResponseHTTP'
      summary: Get all products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create new product and store in the database
      parameters:
      - description: Add product
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.Product'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseHTTP'
      summary: Create new product
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Updates existing product and stores in the database
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.Product'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Updates existing product
      tags:
      - products
  /api/products/{id}:
    delete:
      consumes:
      - application/json
      description: Remove product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseHTTP'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseHTTP'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/models.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Remove product by ID
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Get product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.ResponseHTTP'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Product'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseHTTP'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/models.ResponseHTTP'
      summary: Get product by ID
      tags:
      - products
  /api/users:
    post:
      consumes:
      - application/json
      description: Create new user and store in the database
      parameters:
      - description: Add user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseHTTP'
      summary: Create new user
      tags:
      - users
  /api/users/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a user from the database
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Deletes a user from the database
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.ResponseHTTP'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.User'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseHTTP'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/models.ResponseHTTP'
      summary: Get user by ID
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: Updates the user's names field
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Update a user
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
